<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PHP lesson</title>
</head>

<body>
    <div>
        <h2>Подключение файлов</h2>
        <p>Подключить файлы можно несколькими способами:</p>
        <ul>
            <li><b>include</b> - позволяет дальше выполнять код, даже при отсутствии файла.</li>
            <li><b>require</b> - выдает фатальную ошибку и не дает дальнейшему коду выполняться.</li>
            <li>При добавлении ключевого слова<b>_once</b> - код будет проверять - подключался ли файл ранее и выведет его лишь один раз.</li>
        </ul>
        <pre>
            require_once 'script.php';
            require_once 'utilits/script.php';
        </pre>
        <p>Все пути указываются относительно <b>index.php</b></p>
    </div>

    <div>
        <h2>ТИПЫ ДАННЫХ</h2>
        <h3>Четыре скалярных типа:</h3>
        <ul>
            <li>boolean - логический;</li>
            <li>integer - целое число;</li>
            <li>float(double) - число с плавающей точкой;</li>
            <li>string - строка;</li>
        </ul>
        <h3>Два смешанных типа:</h3>
        <ul>
            <li>array - массив;</li>
            <li>object - экземпляр класса;</li>
        </ul>
        <h3>Два специальных типа:</h3>
        <ul>
            <li>resource - ссылка на внешний по отношении к скрипту источник данных (файл на диске, изображение в памяти и т.п.);</li>
            <li>NULL - отсутствие какого-либо значения;</li>
        </ul>
    </div>
    <div>
        <h2>Объявление переменной</h2>
        <p>Переменная объявляется знаком <b>$</b>. <br>
            Например: <b>$num</b>
        </p>
        <p>
            Переменная, которой не присвоено значение выводится как <b>Notice</b>, что является ошибкой. <br>
            Чтоб включить проверку на ошибки, нужно ввести: <b>ini_set('error_reporting', E_ALL);</b>
        </p>
        Чтоб уничтожить переменную, нужно применить функцию <b>unset();</b><br>
        Например: <b>unset($var);</b>
        </p>

    </div>
    <div>
        <h2>Проверка переменных</h2>
        <ul>
            <li><b>isset()</b> - проверка, существует ли переменная. Если да, то получим 1, если нет - то ничего не получим. <br>
                Например: <b>isset($var)</b>
            </li>
            <li><b>empty()</b> - проверка, существует ли переменная. Если нет, то получим 1, если да - то ничего не получим. <br>
                Например: <b>isset($var)</b>
            </li>
            <li><b>gettype()</b> - проверяет тип переменной. (Возвращает результат в виде строкового значения) <br>
                Например: <b>gettype($var)</b>
            </li>
            <li><b>is_int()</b> - проверка на конкретный тип переменной (тип указывается после нижнего подчеркивания (_)). <br>
                Например: <b>is_int($var)</b>
            </li>
        </ul>
        <h3>Пример применения проверки переменной</h3>
        <pre>
            if(isset($var)){
                echo "Переменная существует";
            }
        </pre>
    </div>
    <div>
        <h2>Классы и объекты</h2>
        <p>Для объявления класса используется зарезервированное слово: <b>class</b></p>
        <P>Также для указания области видимости есть ключевые слова:</P>
        <ul>
            <li><b>public (общедоступный)</b> - разрешен отовсюду.</li>
            <li><b>protected (защищенный) - разрешает доступ самому классу, наследующим его классам и родительским классам.</b></li>
            <li><b>private (закрытый) - ограничивает область видимости так, что только класс, где объявлен сам элемент, имеет к нему доступ.</b></li>
        </ul>
        <pre>
            class SomePeople {
                public $age;
                public $name;
            }
        </pre>
        <p>Класс создает конструкцию переменных, по которой в дальнейшем можно будет создавать объект, с помощью ключевого слова new и указания имени класса. Например</p>
        <pre>
            $nick = new SomePeople();
            $nick->age = 30;
            $nick->name = "Nick";
        </pre>
        <p>Также можно задать и статическую переменную класса, к которой можно обратиться даже не создавая переменной на его основе:</p>
        <pre>
            class SomePeople {
                public $age;
                public $name;
                public static $people = 1;
            }
            </pre>
    </div>

    <div>
        <h2>Копирование в PHP</h2>
        <p>При копировании методом присваивания:</p>
        <pre>
            $nick = 10;
            $dave = $nick;
        </pre>
        <p>переменная не занимает отдельную ячейку в оперативной памяти, и даже при дальнейшем изменении первой переменной - меняется и вторая.</p>
        <p>Чтобы этого избежать, применяется ключевое слово <b>clone</b>:
        <pre>
             $nick = 30;
             $dave = clone $nick;
        </pre>
        Такая конструкция создает новую ячейку в оперативной памяти и присваивает значение первой переменной, а не обращается каждый раз к его значению.
        </p>
    </div>
    <div>
        <h2>Константы</h2>
        <p><b>Константа</b> - это переменная, которую нельзя изменить.</p>
        <p>Конструкция создания константы выглядит следующим образом: <b>define(name, value);</b>, а также <b>const NAME = "name";</b></p>
        <p>Имя константы принято записывать в верхнем регистре, т.к. это обозначает её неизменность.</p>
        <pre>
            define('PI', 3.14);
            const NAME = "name";
        </pre>
        <p>Имя константы регистрозависимо, чтоб отменить зависимость от регистра, нужно добавить третье булевое значение - <b>true</b></p>
        <pre>
            define('PI', 3.14, true);
            echo pi;
        </pre>
        <p>При таком обращении к константе, ошибки не будет</p>
        <p>Проверка на наличие константы: <b>defined('name');</b> Возвращает либо <b>true</b>, либо <b>false</b></p>
        <h2>Предопределенные константы</h2>
        <ul>
            <li><b>__LINE__</b> - показывает какая текущая строка, с которой мы работаем</li>
            <li><b>__FILE__</b> - показывает путь файла</li>
            <li><b>__FUNCTION__</b> - показывает имя функции</li>
            <li><b>__CLASS__</b> - показывает имя класса</li>
            <li><b>__METHOD__</b> - показывает имя метода</li>
            <li><b>__DIR__</b> - показывает текущую директорию в котором расположен скрипт</li>
            <li><b>PHP_VERSION</b> - версия интерпритатора</li>
            <li><b>PHP_OS</b> - версия ОС</li>
            <li><b>PHP_EOL</b> - символ конца строки, используемый на текущей платформе</li>
        </ul>
    </div>


    <?php
        echo "Используется версия интерпритатора PHP: " . PHP_VERSION;
    ?>
</body>

</html>